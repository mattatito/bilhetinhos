// Mocks generated by Mockito 5.4.4 from annotations
// in bilhetinhos/test/modules/auth/domain/use_cases/create_user_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bilhetinhos/modules/auth/domain/errors/login_errors.dart'
    as _i3;
import 'package:bilhetinhos/modules/auth/domain/models/user_model.dart' as _i2;
import 'package:bilhetinhos/modules/auth/domain/repositories/user_authentication_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthErrors_1 extends _i1.SmartFake implements _i3.AuthErrors {
  _FakeAuthErrors_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRemoteAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteAuthenticationRepository extends _i1.Mock
    implements _i4.UserRemoteAuthenticationRepository {
  @override
  _i5.Future<(_i2.UserModel, _i3.AuthErrors)> loginUserWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUserWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<(_i2.UserModel, _i3.AuthErrors)>.value((
          _FakeUserModel_0(
            this,
            Invocation.method(
              #loginUserWithEmailAndPassword,
              [
                email,
                password,
              ],
            ),
          ),
          _FakeAuthErrors_1(
            this,
            Invocation.method(
              #loginUserWithEmailAndPassword,
              [
                email,
                password,
              ],
            ),
          )
        )),
        returnValueForMissingStub:
            _i5.Future<(_i2.UserModel, _i3.AuthErrors)>.value((
          _FakeUserModel_0(
            this,
            Invocation.method(
              #loginUserWithEmailAndPassword,
              [
                email,
                password,
              ],
            ),
          ),
          _FakeAuthErrors_1(
            this,
            Invocation.method(
              #loginUserWithEmailAndPassword,
              [
                email,
                password,
              ],
            ),
          )
        )),
      ) as _i5.Future<(_i2.UserModel, _i3.AuthErrors)>);

  @override
  _i5.Future<_i3.AuthErrors?> createUser(
    String? name,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [
            name,
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<_i3.AuthErrors?>.value(),
        returnValueForMissingStub: _i5.Future<_i3.AuthErrors?>.value(),
      ) as _i5.Future<_i3.AuthErrors?>);
}
